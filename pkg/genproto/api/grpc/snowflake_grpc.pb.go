// Copyright 2022 The imkuqin-zw Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-yggdrasil-grpc. DO NOT EDIT.

package grpcimpl

import (
	context "context"
	api "github.com/imkuqin-zw/uuid-generator/pkg/genproto/api"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the yggdrasil package it is being compiled against.

type snowflakeClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeClient(cc grpc.ClientConnInterface) api.SnowflakeClient {
	return &snowflakeClient{cc}
}

func (c *snowflakeClient) FetchNext(ctx context.Context, in *api.FetchSnowflakeNextReq) (*api.UUID, error) {
	out := new(api.UUID)
	err := c.cc.Invoke(ctx, "/com.github.imkuqin_zw.uuid_generator.api.Snowflake/FetchNext", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Snowflake_FetchNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.FetchSnowflakeNextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(api.SnowflakeServer).FetchNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.imkuqin_zw.uuid_generator.api.Snowflake/FetchNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(api.SnowflakeServer).FetchNext(ctx, req.(*api.FetchSnowflakeNextReq))
	}
	return interceptor(ctx, in, info, handler)
}

var SnowflakeServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.imkuqin_zw.uuid_generator.api.Snowflake",
	HandlerType: (*api.SnowflakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNext",
			Handler:    _Snowflake_FetchNext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/snowflake.proto",
}
