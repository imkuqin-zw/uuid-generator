// Code generated by protoc-gen-yggdrasil-grpc. DO NOT EDIT.

package grpcimpl

import (
	context "context"
	api "github.com/imkuqin-zw/uuid-generator/pkg/genproto/api"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the yggdrasil package it is being compiled against.

type allocClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocClient(cc grpc.ClientConnInterface) api.AllocClient {
	return &allocClient{cc}
}

func (c *allocClient) FetchNext(ctx context.Context, in *api.FetchSeqNextReq) (*api.UUID, error) {
	out := new(api.UUID)
	err := c.cc.Invoke(ctx, "/com.github.imkuqin_zw.uuid_generator.api.Alloc/FetchNext", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Alloc_FetchNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.FetchSeqNextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(api.AllocServer).FetchNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.imkuqin_zw.uuid_generator.api.Alloc/FetchNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(api.AllocServer).FetchNext(ctx, req.(*api.FetchSeqNextReq))
	}
	return interceptor(ctx, in, info, handler)
}

var AllocServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.imkuqin_zw.uuid_generator.api.Alloc",
	HandlerType: (*api.AllocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNext",
			Handler:    _Alloc_FetchNext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/seqsvr.proto",
}
